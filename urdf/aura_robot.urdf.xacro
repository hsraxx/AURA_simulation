<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="aura">

  <!-- Include materials -->
  <xacro:include filename="$(find aura_simulation)/urdf/materials.xacro" />

  <!-- Robot dimensions -->
  <xacro:property name="base_length" value="0.5"/>
  <xacro:property name="base_width" value="0.5"/>
  <xacro:property name="base_height" value="0.2"/>
  <xacro:property name="wheel_radius" value="0.06"/>
  <xacro:property name="wheel_width" value="0.04"/>
  <xacro:property name="wheel_separation" value="0.4"/>
  <xacro:property name="caster_radius" value="0.02"/>
  <xacro:property name="lidar_height" value="0.05"/>
  <xacro:property name="lidar_radius" value="0.06"/>
  <xacro:property name="camera_size" value="0.03"/>

  <!-- Base link - 0.5m x 0.5m x 0.2m box -->
  <link name="base_link">
    <visual>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
      <material name="aura_blue"/>
    </visual>
    <collision>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="10.0"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.208" ixy="0.0" ixz="0.0" iyy="0.208" iyz="0.0" izz="0.417"/>
    </inertial>
  </link>

  <!-- Left drive wheel -->
  <link name="left_wheel">
    <visual>
      <geometry>
        <cylinder length="${wheel_width}" radius="${wheel_radius}"/>
      </geometry>
      <material name="wheel_black"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="${wheel_width}" radius="${wheel_radius}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.5"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.0018" ixy="0.0" ixz="0.0" iyy="0.0018" iyz="0.0" izz="0.0036"/>
    </inertial>
  </link>

  <!-- Right drive wheel -->
  <link name="right_wheel">
    <visual>
      <geometry>
        <cylinder length="${wheel_width}" radius="${wheel_radius}"/>
      </geometry>
      <material name="wheel_black"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="${wheel_width}" radius="${wheel_radius}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.5"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.0018" ixy="0.0" ixz="0.0" iyy="0.0018" iyz="0.0" izz="0.0036"/>
    </inertial>
  </link>

  <!-- Caster wheel -->
  <link name="caster_wheel">
    <visual>
      <geometry>
        <sphere radius="${caster_radius}"/>
      </geometry>
      <material name="caster_gray"/>
    </visual>
    <collision>
      <geometry>
        <sphere radius="${caster_radius}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.00016" ixy="0.0" ixz="0.0" iyy="0.00016" iyz="0.0" izz="0.00016"/>
    </inertial>
  </link>

  <!-- Lidar link (RPLiDAR A1 style) -->
  <link name="lidar_link">
    <visual>
      <geometry>
        <cylinder length="${lidar_height}" radius="${lidar_radius}"/>
      </geometry>
      <material name="lidar_red"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="${lidar_height}" radius="${lidar_radius}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.2"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.00072" ixy="0.0" ixz="0.0" iyy="0.00072" iyz="0.0" izz="0.00144"/>
    </inertial>
  </link>

  <!-- Camera link (placeholder) -->
  <link name="camera_link">
    <visual>
      <geometry>
        <box size="${camera_size} ${camera_size} ${camera_size}"/>
      </geometry>
      <material name="camera_gray"/>
    </visual>
    <collision>
      <geometry>
        <box size="${camera_size} ${camera_size} ${camera_size}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.00015" ixy="0.0" ixz="0.0" iyy="0.00015" iyz="0.0" izz="0.00015"/>
    </inertial>
  </link>

  <!-- Joints -->
  
  <!-- Left wheel joint -->
  <joint name="left_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="left_wheel"/>
    <origin xyz="0 ${wheel_separation/2} -${base_height/2 + wheel_radius}" rpy="0 0 0"/>
    <axis xyz="0 0 1"/>
    <dynamics damping="0.1" friction="0.1"/>
  </joint>

  <!-- Right wheel joint -->
  <joint name="right_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="right_wheel"/>
    <origin xyz="0 -${wheel_separation/2} -${base_height/2 + wheel_radius}" rpy="0 0 0"/>
    <axis xyz="0 0 1"/>
    <dynamics damping="0.1" friction="0.1"/>
  </joint>

  <!-- Caster wheel joint -->
  <joint name="caster_wheel_joint" type="fixed">
    <parent link="base_link"/>
    <child link="caster_wheel"/>
    <origin xyz="${base_length/2 - 0.05} 0 -${base_height/2 + caster_radius}" rpy="0 0 0"/>
  </joint>

  <!-- Lidar joint -->
  <joint name="lidar_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lidar_link"/>
    <origin xyz="0 0 ${base_height/2 + lidar_height/2}" rpy="0 0 0"/>
  </joint>

  <!-- Camera joint -->
  <joint name="camera_joint" type="fixed">
    <parent link="base_link"/>
    <child link="camera_link"/>
    <origin xyz="${base_length/2 + camera_size/2} 0 0" rpy="0 0 0"/>
  </joint>

  <!-- ROS2 Control transmissions -->
  <transmission name="left_wheel_transmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="left_wheel_joint">
      <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>
    <actuator name="left_wheel_motor">
      <hardwareInterface>hardware_interface/VelocityActuatorInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>

  <transmission name="right_wheel_transmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="right_wheel_joint">
      <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>
    <actuator name="right_wheel_motor">
      <hardwareInterface>hardware_interface/VelocityActuatorInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>

  <!-- Gazebo plugins -->
  <gazebo>
    <!-- Differential drive plugin -->
    <plugin name="diff_drive" filename="libgazebo_ros_diff_drive.so">
      <ros>
        <namespace>/aura</namespace>
      </ros>
      <update_rate>50</update_rate>
      <left_joint>left_wheel_joint</left_joint>
      <right_joint>right_wheel_joint</right_joint>
      <wheel_separation>${wheel_separation}</wheel_separation>
      <wheel_radius>${wheel_radius}</wheel_radius>
      <command_topic>cmd_vel</command_topic>
      <odometry_topic>odom</odometry_topic>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>false</publish_wheel_tf>
      <odometry_source>world</odometry_source>
      <ros2_control>true</ros2_control>
    </plugin>

    <!-- Lidar plugin -->
    <plugin name="lidar" filename="libgazebo_ros_ray_sensor.so">
      <ros>
        <namespace>/aura</namespace>
        <remapping>scan:=scan</remapping>
      </ros>
      <update_rate>20</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1</resolution>
            <min_angle>-3.14159</min_angle>
            <max_angle>3.14159</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.1</min>
          <max>12.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <always_on>true</always_on>
      <visualize>true</visualize>
    </plugin>

    <!-- Camera plugin -->
    <plugin name="camera" filename="libgazebo_ros_camera.so">
      <ros>
        <namespace>/aura</namespace>
        <remapping>image_raw:=camera/image_raw</remapping>
        <remapping>camera_info:=camera/camera_info</remapping>
      </ros>
      <update_rate>30</update_rate>
      <camera_name>aura_camera</camera_name>
      <camera>camera_link</camera>
      <always_on>true</always_on>
      <visualize>true</visualize>
      <image_width>640</image_width>
      <image_height>480</image_height>
      <image_format>R8G8B8</image_format>
      <clip_near>0.1</clip_near>
      <clip_far>100</clip_far>
      <noise>
        <type>gaussian</type>
        <mean>0.0</mean>
        <stddev>0.007</stddev>
      </noise>
    </plugin>

    <!-- ROS2 Control plugin -->
    <plugin name="ros2_control" filename="libgazebo_ros2_control.so">
      <parameters>$(find aura_simulation)/config/aura_controllers.yaml</parameters>
    </plugin>
  </gazebo>

</robot>

